/*
 * This file is part of the Modular package.
 *
 * (c) Gr√©goire Ciles <bonjour@gregoireciles.fr>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

// eslint-disable-next-line max-len
import { ModularModuleIdNotFoundException } from './exceptions/modular_module_id_not_found.exception';
import { ModularModuleNotFoundException } from './exceptions/modular_module_not_found.exception';
import { modulesCompiled } from './modules_compiled';
import type { ModuleName, ModuleOptions } from './types';
import { generateCustomQuery } from './utils/generate_custom_query';
import { isElement } from './utils/is_element';
import { isFunction } from './utils/is_function';

/**
 * Module is a class that represents a module.
 * It gives access to the module element and the module methods.
 *
 * @template [TModuleElement] - The type of the module element, extending HTMLElement. Defaults to HTMLElement.
 *
 * @example
 * ```ts
 * class Accordion extends Module<HTMLDivElement> {
 *   init() {
 *     // ...
 *   }
 *
 *   destroy() {
 *     // ...
 *   }
 * }
 * ```
 */
export class Module<TModuleElement extends HTMLElement = HTMLElement> {
  /**
   * Unique identifier for the module instance.
   *
   * @private
   * @type {number}
   */
  ID: number;

  /**
   * Name of the module, used for referencing and querying.
   *
   * @private
   * @type {ModuleName}
   */
  name: ModuleName;

  /**
   * The DOM element associated with the module.
   *
   * @private
   * @type {TModuleElement}
   */
  element: TModuleElement;

  constructor({ ID, name, element }: ModuleOptions<TModuleElement>) {
    this.ID = ID;
    this.name = name;
    this.element = element;
  }

  /**
   * Initializes the module.
   */
  init(): void {}

  /**
   * Cleans up and destroys the module.
   */
  destroy(): void {}

  /**
   * Bind all methods to the module instance.
   */
  bind(): void {}

  /**
   * Calls a method on all instances of a specified module by its name.
   *
   * @param {ModuleKey} moduleName - The name of the module to target.
   * @param {string} methodName - The name of the method to call.
   * @param {...any[]} args - Arguments to pass to the method.
   * @throws {ModularModuleNotFoundException} If no module instances are found with the specified name.
   */
  call(moduleName: ModuleName, methodName: string, ...args: any[]): void {
    const moduleInstances = modulesCompiled.filterByName(moduleName);

    if (moduleInstances && moduleInstances.length > 0) {
      moduleInstances.forEach((moduleInstance) =>
        this.#callMethod(moduleInstance, methodName, args),
      );
    } else {
      throw new ModularModuleNotFoundException(moduleName);
    }
  }

  /**
   * Calls a method on a module instance identified by its ID.
   *
   * The ID is generated by the compiler and is unique for each module instance.
   *
   * @param {number} id - The ID of the module instance.
   * @param {string} methodName - The name of the method to call.
   * @param {...any[]} args - Arguments to pass to the method.
   * @throws {ModularModuleIdNotFoundException} If no module instance is found with the specified ID.
   */
  callById(id: number, methodName: string, ...args: any[]): void {
    const moduleInstance = modulesCompiled.getById(id);

    if (moduleInstance) {
      this.#callMethod(moduleInstance, methodName, args);
    } else {
      throw new ModularModuleIdNotFoundException(id);
    }
  }

  /**
   * Queries the DOM for elements matching a specific selector within the module's context.
   *
   * @param {string} [selectors] - The CSS selector to match elements.
   * @param {HTMLElement} [context] - The context within which to search for elements.
   * @returns {T | null} - The matching element or array of elements, or null if no match is found.
   * @template T - The type of the returned element(s), either HTMLElement or array of HTMLElements.
   */
  q<TReturnValue extends HTMLElement | HTMLElement[]>(
    selectors?: string,
    context?: HTMLElement,
  ): TReturnValue | null {
    let element: TModuleElement | HTMLElement = this.element;
    if (context && isElement(context)) {
      element = context;
    }

    if (!element) {
      return null;
    }

    const elements = Array.from(
      element.querySelectorAll(generateCustomQuery(this.name, selectors)),
    );

    if (elements && elements.length) {
      if (elements.length === 1) {
        return elements[0] as TReturnValue;
      }

      return elements as TReturnValue;
    }

    return null;
  }

  /**
   * Finds the first parent element of a specified target that matches a given query.
   *
   * @param {string} query - The query to match parent elements.
   * @param {T} target - The target element to start the search from.
   * @returns {T | undefined} - The matching parent element, or undefined if no match is found.
   * @template T - The type of the target and returned element, extending HTMLElement.
   */
  parent<T extends HTMLElement>(query: string, target: T): T | undefined {
    const data = `[data-${this.name}="${query}"]`;
    let parent = target.parentNode;

    while (parent && parent !== document) {
      if ((parent as T).matches(data)) {
        return parent as T;
      }

      parent = parent.parentNode;
    }
  }

  /**
   * Retrieves the value of a data attribute from the specified element.
   *
   * @param {string} qualifiedName - The name of the data attribute.
   * @param {T} [target] - The element to retrieve the attribute from. Defaults to the module's element.
   * @returns {string | null} - The value of the data attribute, or null if it does not exist.
   * @template T - The type of the target element, extending HTMLElement.
   */
  getData<T extends HTMLElement>(qualifiedName: string, target?: T): string | null {
    const element = target || this.element;
    if (element) {
      return element.getAttribute(`data-${qualifiedName}`);
    }

    return null;
  }

  /**
   * Sets the value of a data attribute on the specified element.
   *
   * @param {string} qualifiedName - The name of the data attribute.
   * @param {string} value - The value to set the attribute to.
   * @param {T} [target] - The element to set the attribute on. Defaults to the module's element.
   * @template T - The type of the target element, extending HTMLElement.
   */
  setData<T extends HTMLElement>(qualifiedName: string, value: string, target?: T): void {
    const element = target || this.element;
    if (element) {
      element.setAttribute(`data-${qualifiedName}`, value);
    }
  }

  /**
   * Calls a method on a given module instance.
   *
   * @private
   * @param {any} moduleInstance - The module instance to call the method on.
   * @param {string} methodName - The name of the method to call.
   * @param {...any[]} args - Arguments to pass to the method.
   */
  #callMethod(moduleInstance: any, methodName: string, ...args: any[]): void {
    const moduleMethod = moduleInstance[methodName];
    if (moduleMethod && isFunction(moduleMethod)) {
      moduleMethod.apply(this, ...args);
    }
  }
}
